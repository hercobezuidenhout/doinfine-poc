// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TeamLunch.Data;

#nullable disable

namespace TeamLunch.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20221029100036_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TeamLunch.Data.Entities.Fine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Paid")
                        .HasColumnType("bit");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Fines");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Paid = false,
                            Reason = "For showing up late to a meeting.",
                            UserId = "3e64b61f-ce47-4f30-8d4e-4de4869a07ad"
                        },
                        new
                        {
                            Id = 2,
                            Paid = false,
                            Reason = "For leaving a dirty pull request.",
                            UserId = "3e64b61f-ce47-4f30-8d4e-4de4869a07ad"
                        },
                        new
                        {
                            Id = 3,
                            Paid = false,
                            Reason = "For wearing a Manchester United shirt.",
                            UserId = "3e64b61f-ce47-4f30-8d4e-4de4869a07ad"
                        },
                        new
                        {
                            Id = 4,
                            Paid = false,
                            Reason = "For pushing a secret into remote.",
                            UserId = "dd760d11-91ed-4a32-9810-683f7df14239"
                        },
                        new
                        {
                            Id = 5,
                            Paid = false,
                            Reason = "For not using the team's virtual background.",
                            UserId = "dd760d11-91ed-4a32-9810-683f7df14239"
                        },
                        new
                        {
                            Id = 6,
                            Paid = false,
                            Reason = "For leaving without completing the pull request.",
                            UserId = "dd760d11-91ed-4a32-9810-683f7df14239"
                        },
                        new
                        {
                            Id = 7,
                            Paid = false,
                            Reason = "For loving coffee way too much.",
                            UserId = "dd760d11-91ed-4a32-9810-683f7df14239"
                        });
                });

            modelBuilder.Entity("TeamLunch.Data.Entities.FineRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Finee")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Finer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FineRequests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Finee = "dd760d11-91ed-4a32-9810-683f7df14239",
                            Finer = "3e64b61f-ce47-4f30-8d4e-4de4869a07ad",
                            Reason = "not caring enough about water",
                            TeamId = 1
                        },
                        new
                        {
                            Id = 2,
                            Finee = "dd760d11-91ed-4a32-9810-683f7df14239",
                            Finer = "3e64b61f-ce47-4f30-8d4e-4de4869a07ad",
                            Reason = "not caring enough about dogs",
                            TeamId = 1
                        },
                        new
                        {
                            Id = 3,
                            Finee = "dd760d11-91ed-4a32-9810-683f7df14239",
                            Finer = "3e64b61f-ce47-4f30-8d4e-4de4869a07ad",
                            Reason = "not caring enough about something else",
                            TeamId = 1
                        },
                        new
                        {
                            Id = 4,
                            Finee = "dd760d11-91ed-4a32-9810-683f7df14239",
                            Finer = "3e64b61f-ce47-4f30-8d4e-4de4869a07ad",
                            Reason = "not caring enough about something else",
                            TeamId = 1
                        },
                        new
                        {
                            Id = 5,
                            Finee = "dd760d11-91ed-4a32-9810-683f7df14239",
                            Finer = "3e64b61f-ce47-4f30-8d4e-4de4869a07ad",
                            Reason = "not caring enough about something else",
                            TeamId = 1
                        });
                });

            modelBuilder.Entity("TeamLunch.Data.Entities.FineRequestResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<int>("FineRequestId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FineRequestId");

                    b.HasIndex("UserId");

                    b.ToTable("FineRequestResponses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Approved = true,
                            FineRequestId = 5,
                            UserId = "3e64b61f-ce47-4f30-8d4e-4de4869a07ad"
                        });
                });

            modelBuilder.Entity("TeamLunch.Data.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("TeamLunch.Data.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfPayment")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("TeamLunch.Data.Entities.PaymentRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfPayment")
                        .HasColumnType("datetime2");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentRequests");
                });

            modelBuilder.Entity("TeamLunch.Data.Entities.PaymentRequestResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<int>("PaymentRequestId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentRequestId");

                    b.ToTable("PaymentRequestResponses");
                });

            modelBuilder.Entity("TeamLunch.Data.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SegmentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Core",
                            SegmentId = 1
                        });
                });

            modelBuilder.Entity("TeamLunch.Data.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "3e64b61f-ce47-4f30-8d4e-4de4869a07ad",
                            FirstName = "Billy",
                            LastName = "Anderson"
                        },
                        new
                        {
                            Id = "dd760d11-91ed-4a32-9810-683f7df14239",
                            FirstName = "Steve",
                            LastName = "Walkman"
                        });
                });

            modelBuilder.Entity("TeamLunch.Data.Entities.UserNotification", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<bool>("Read")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "NotificationId");

                    b.HasIndex("NotificationId");

                    b.ToTable("UserNotifications");
                });

            modelBuilder.Entity("TeamUser", b =>
                {
                    b.Property<int>("TeamsId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TeamsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("TeamUser");

                    b.HasData(
                        new
                        {
                            TeamsId = 1,
                            UsersId = "3e64b61f-ce47-4f30-8d4e-4de4869a07ad"
                        },
                        new
                        {
                            TeamsId = 1,
                            UsersId = "dd760d11-91ed-4a32-9810-683f7df14239"
                        });
                });

            modelBuilder.Entity("TeamLunch.Data.Entities.Fine", b =>
                {
                    b.HasOne("TeamLunch.Data.Entities.User", null)
                        .WithMany("Fines")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeamLunch.Data.Entities.FineRequestResponse", b =>
                {
                    b.HasOne("TeamLunch.Data.Entities.FineRequest", null)
                        .WithMany("Responses")
                        .HasForeignKey("FineRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamLunch.Data.Entities.User", null)
                        .WithMany("FineRequestResponses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeamLunch.Data.Entities.PaymentRequestResponse", b =>
                {
                    b.HasOne("TeamLunch.Data.Entities.PaymentRequest", null)
                        .WithMany("Responses")
                        .HasForeignKey("PaymentRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeamLunch.Data.Entities.UserNotification", b =>
                {
                    b.HasOne("TeamLunch.Data.Entities.Notification", "Notification")
                        .WithMany("UserNotifications")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamLunch.Data.Entities.User", "User")
                        .WithMany("UserNotifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TeamUser", b =>
                {
                    b.HasOne("TeamLunch.Data.Entities.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamLunch.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeamLunch.Data.Entities.FineRequest", b =>
                {
                    b.Navigation("Responses");
                });

            modelBuilder.Entity("TeamLunch.Data.Entities.Notification", b =>
                {
                    b.Navigation("UserNotifications");
                });

            modelBuilder.Entity("TeamLunch.Data.Entities.PaymentRequest", b =>
                {
                    b.Navigation("Responses");
                });

            modelBuilder.Entity("TeamLunch.Data.Entities.User", b =>
                {
                    b.Navigation("FineRequestResponses");

                    b.Navigation("Fines");

                    b.Navigation("UserNotifications");
                });
#pragma warning restore 612, 618
        }
    }
}
