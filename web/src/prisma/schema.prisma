// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums

enum FineStatus {
  PENDING
  APPROVED
  REJECTED
  PAID
}

enum PaymentStatus {
  PENDING
  APPROVED
  REJECTED
}

enum RoleType {
  ADMIN
  MEMBER
}

enum ReviewStatus {
  APPROVED
  REJECTED
}

// Models

model User {
  id            String          @id @default(cuid())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt @default(now())
  receivedFines Fine[]          @relation("Fine_issuedByUser")
  issuedFines   Fine[]          @relation("Fine_issuedToUser")
  spaceRoles    SpaceRole[]
  teamRoles     TeamRole[]
  fineReview    FineReview[]
  paymentReview PaymentReview[]

  // Next.auth fields
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model Space {
  id        Int         @id @default(autoincrement())
  name      String
  avatarUrl String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  teams     Team[]
  fines     Fine[]
  roles     SpaceRole[]
}

model Team {
  id        Int        @id @default(autoincrement())
  name      String
  avatarUrl String?
  space     Space      @relation(fields: [spaceId], references: [id])
  spaceId   Int
  fines     Fine[]
  roles     TeamRole[]

  @@unique([spaceId(sort: Desc), name])
}

model Fine {
  id          Int          @id @default(autoincrement())
  description String
  issuedBy    User         @relation(name: "Fine_issuedByUser", fields: [issuedById], references: [id])
  issuedById  String
  issuedTo    User         @relation(name: "Fine_issuedToUser", fields: [issuedToId], references: [id])
  issuedToId  String
  status      FineStatus   @default(PENDING)
  payments    Payment[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  reviews     FineReview[]
  space       Space?       @relation(fields: [spaceId], references: [id])
  spaceId     Int?
  team        Team?        @relation(fields: [teamId], references: [id])
  teamId      Int?
}

model Payment {
  id          Int             @id @default(autoincrement())
  description String
  fine        Fine            @relation(fields: [fineId], references: [id])
  fineId      Int
  status      PaymentStatus   @default(PENDING)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  reviews     PaymentReview[]

  @@unique([fineId(sort: Desc), description])
}

model FineReview {
  fineId Int
  userId String
  fine   Fine         @relation(fields: [fineId], references: [id])
  user   User         @relation(fields: [userId], references: [id])
  status ReviewStatus

  @@id([fineId, userId])
}

model PaymentReview {
  paymentId Int
  userId    String
  payment   Payment      @relation(fields: [paymentId], references: [id])
  user      User         @relation(fields: [userId], references: [id])
  status    ReviewStatus

  @@id([paymentId, userId])
}

model SpaceRole {
  role    RoleType @default(MEMBER)
  userId  String
  spaceId Int
  space   Space    @relation(fields: [spaceId], references: [id])
  user    User     @relation(fields: [userId], references: [id])

  @@id([spaceId, userId])
}

model TeamRole {
  role   RoleType @default(MEMBER)
  userId String
  teamId Int
  team   Team     @relation(fields: [teamId], references: [id])
  user   User     @relation(fields: [userId], references: [id])

  @@id([teamId, userId])
}

// Next.auth specific models

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
